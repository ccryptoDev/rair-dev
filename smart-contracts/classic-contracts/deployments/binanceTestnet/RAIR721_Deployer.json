{
  "address": "0x3F37dbA0f085064BAc81E0d150df30c0489E95B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "deployContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3aa2cf7e174e44eebbe35b362348f4c6e68dcbfef01859886f3059991e8783f6",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x3F37dbA0f085064BAc81E0d150df30c0489E95B9",
    "transactionIndex": 3,
    "gasUsed": "5001139",
    "logsBloom": "0x
    "blockHash": "0x887a1709cc7ef540295699b024dde9f091488326b977799f1399327b63994e48",
    "transactionHash": "0x3aa2cf7e174e44eebbe35b362348f4c6e68dcbfef01859886f3059991e8783f6",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 19588146,
        "transactionHash": "0x3aa2cf7e174e44eebbe35b362348f4c6e68dcbfef01859886f3059991e8783f6",
        "address": "0x3F37dbA0f085064BAc81E0d150df30c0489E95B9",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x887a1709cc7ef540295699b024dde9f091488326b977799f1399327b63994e48"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 19588146,
        "transactionHash": "0x3aa2cf7e174e44eebbe35b362348f4c6e68dcbfef01859886f3059991e8783f6",
        "address": "0x3F37dbA0f085064BAc81E0d150df30c0489E95B9",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a73",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x887a1709cc7ef540295699b024dde9f091488326b977799f1399327b63994e48"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 19588146,
        "transactionHash": "0x3aa2cf7e174e44eebbe35b362348f4c6e68dcbfef01859886f3059991e8783f6",
        "address": "0x3F37dbA0f085064BAc81E0d150df30c0489E95B9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x887a1709cc7ef540295699b024dde9f091488326b977799f1399327b63994e48"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 19588146,
        "transactionHash": "0x3aa2cf7e174e44eebbe35b362348f4c6e68dcbfef01859886f3059991e8783f6",
        "address": "0x3F37dbA0f085064BAc81E0d150df30c0489E95B9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x887a1709cc7ef540295699b024dde9f091488326b977799f1399327b63994e48"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 19588146,
        "transactionHash": "0x3aa2cf7e174e44eebbe35b362348f4c6e68dcbfef01859886f3059991e8783f6",
        "address": "0x3F37dbA0f085064BAc81E0d150df30c0489E95B9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a73",
          "0x000000000000000000000000b6d75f843fc27b9ff564738520e416e7d0ef4bd2",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x887a1709cc7ef540295699b024dde9f091488326b977799f1399327b63994e48"
      }
    ],
    "blockNumber": 19588146,
    "cumulativeGasUsed": "5533490",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB6D75f843FC27b9fF564738520e416E7D0eF4bD2"
  ],
  "numDeployments": 2,
  "solcInputHash": "a10d8834c3dca6a288befeb088dc9769",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"deployContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"factoryAddress\":\"Address of the factory able to call the deploy function\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Factory Constructor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory/RAIR721_Deployer.sol\":\"RAIR721_Deployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Factory/RAIR721_Deployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n// Parents\\nimport \\\"latest-openzeppelin-contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../Tokens/RAIR721_Contract.sol\\\";\\n\\ninterface IRAIR721_Deployer {\\n    function deployContract(address creator, string calldata title)\\n        external\\n        returns (address deploymentAddress);\\n}\\n\\n// @title   RAIR ERC721 Deployer\\n// @notice  This contract is in charge of the deployment of the ERC721 RAIR Tokens\\n// @dev     This contract should be called by the master factory\\ncontract RAIR721_Deployer is IRAIR721_Deployer, AccessControlEnumerable {\\n    bytes32 public constant MAINTAINER = keccak256(\\\"MAINTAINER\\\");\\n    bytes32 public constant FACTORY = keccak256(\\\"FACTORY\\\");\\n\\n    /// @notice Factory Constructor\\n    /// @param  factoryAddress \\t\\tAddress of the factory able to call the deploy function\\n    constructor(address factoryAddress) {\\n        _setRoleAdmin(MAINTAINER, MAINTAINER);\\n        _setRoleAdmin(FACTORY, MAINTAINER);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MAINTAINER, msg.sender);\\n        _setupRole(FACTORY, factoryAddress);\\n    }\\n\\n    // @notice  Deploys the RAIR721 contracts\\n    // @dev     Can only be called by a FACTORY\\n    // @param   creator Contains the address of the sender of the ERC777 tokens\\n    // @param   title   Contains the name of the contract deployment\\n    function deployContract(address creator, string calldata title)\\n        external\\n        override\\n        onlyRole(FACTORY)\\n        returns (address deploymentAddress)\\n    {\\n        RAIR721_Contract newToken = new RAIR721_Contract(title, creator);\\n        return address(newToken);\\n    }\\n}\\n\",\"keccak256\":\"0x2b06e6af659b8c9fc6fad4d2ac65d1a82f4049dcbd7b7bcbe830433aae5692a7\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10; \\n\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256,bytes)\\\")) == 0xc155531d\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _value sale price\\n    function royaltyInfo(\\n    \\tuint256 _tokenId,\\n    \\tuint256 _salePrice)\\n    external returns (\\n    \\taddress receiver,\\n    \\tuint256 royaltyAmount);\\n\\n    /// @notice Informs callers that this contract supports ERC2981\\n    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called\\n    ///      in the initializer, this should be automatic\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements\\n    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\",\"keccak256\":\"0x55209767959f59149522aab059c397444a37dc66f38216c3dce269d723a76325\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IRAIR721_Contract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13; \\n\\nimport 'latest-openzeppelin-contracts/token/ERC721/IERC721.sol';\\n\\ninterface IRAIR721_Contract is IERC721 {\\n\\tstruct range {\\n\\t\\tuint rangeStart;\\n\\t\\tuint rangeEnd;\\n\\t\\tuint tokensAllowed;\\n\\t\\tuint mintableTokens;\\n\\t\\tuint lockedTokens;\\n\\t\\tuint rangePrice;\\n\\t\\tstring rangeName;\\n\\t}\\n\\n\\tstruct collection {\\n\\t\\tuint startingToken;\\n\\t\\tuint endingToken;\\n\\t\\tstring name;\\n\\t\\tuint[] rangeList;\\n\\t}\\n\\n\\tevent CreatedCollection(uint indexed collectionIndex, string collectionName, uint startingToken, uint collectionLength);\\n\\n\\tevent CreatedRange(\\n\\t\\tuint collectionIndex,\\n\\t\\tuint start,\\n\\t\\tuint end,\\n\\t\\tuint price,\\n\\t\\tuint tokensAllowed,\\n\\t\\tuint lockedTokens,\\n\\t\\tstring name,\\n\\t\\tuint rangeIndex\\n\\t);\\n\\tevent UpdatedRange(uint rangeIndex, string name, uint price, uint tokensAllowed, uint lockedTokens);\\n\\tevent TradingLocked(uint indexed rangeIndex, uint from, uint to, uint lockedTokens);\\n\\tevent TradingUnlocked(uint indexed rangeIndex, uint from, uint to);\\n\\n\\tevent UpdatedBaseURI(string newURI, bool appendTokenIndex);\\n\\tevent UpdatedTokenURI(uint tokenId, string newURI);\\n\\tevent UpdatedProductURI(uint productId, string newURI, bool appendTokenIndex);\\n\\tevent UpdatedContractURI(string newURI);\\n\\n\\t// For OpenSea's Freezing\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\n\\n\\t// Get the total number of collections in the contract\\n\\tfunction getCollectionCount() external view returns(uint);\\n\\n\\t// Get a specific collection in the contract\\n\\tfunction getCollection(uint collectionIndex) external view returns(collection memory);\\n\\tfunction rangeInfo(uint rangeIndex) external view returns(range memory data, uint collectionIndex);\\n\\t\\n\\t// Mint a token inside a collection\\n\\tfunction mintFromRange(address to, uint collectionID, uint index) external;\\n\\n\\t// Ask for the royalty info of the creator\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n\\t\\texternal view returns (address receiver, uint256 royaltyAmount);\\n}\",\"keccak256\":\"0x04beb8be7cd95120ee82f97b1693bce2ca6ac8514f85ba246634a1a5db9c62ae\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/RAIR721_Contract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\nimport 'latest-openzeppelin-contracts/token/ERC721/ERC721.sol';\\nimport 'latest-openzeppelin-contracts/access/AccessControl.sol';\\nimport \\\"latest-openzeppelin-contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"latest-openzeppelin-contracts/utils/Strings.sol\\\";\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./IRAIR721_Contract.sol\\\";\\n\\n/// @title  Extended ERC721 contract for the RAIR system\\n/// @notice Uses ERC2981 and ERC165 for standard royalty info\\n/// @notice Uses AccessControl for the minting mechanisms\\n/// @author Juan M. Sanchez M.\\n/// @dev    Ideally generated by a RAIR Token Factory\\ncontract RAIR721_Contract is IERC2981, ERC165, IRAIR721_Contract, ERC721, AccessControl {\\n\\t// Allows the conversion of numbers to strings (used in the token URI functions)\\n\\tusing Strings for uint;\\n\\n\\t// Auxiliary struct used to avoid Stack too deep errors\\n\\tstruct rangeData {\\n\\t\\tuint rangeLength;\\n\\t\\tuint price;\\n\\t\\tuint tokensAllowed;\\n\\t\\tuint lockedTokens;\\n\\t\\tstring name;\\n\\t}\\n\\t\\n\\tmapping(uint => uint) public tokenToCollection;\\n\\tmapping(uint => uint) public tokenToRange;\\n\\tmapping(uint => uint) public rangeToCollection;\\n\\t\\n\\t//URIs\\n\\tmapping(uint => string) internal uniqueTokenURI;\\n\\tmapping(uint => string) internal collectionURI;\\n\\tmapping(uint => bool) internal appendTokenIndexToCollectionURI;\\n\\t\\n\\tstring internal baseURI;\\n\\tstring internal contractMetadataURI;\\n\\n\\tbool appendTokenIndexToContractURI;\\n\\tbool _requireTrader;\\n\\n\\trange[] private _ranges;\\n\\tcollection[] private _collections;\\n\\n\\t// Roles\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\t\\n\\taddress public creatorAddress;\\n\\taddress public factory;\\n\\tstring private _symbol;\\n\\tuint16 private _royaltyFee;\\n\\n\\t/// @notice\\tMakes sure the collection exists before doing changes to it\\n\\t/// @param\\tcollectionID\\tCollection to verify\\n\\tmodifier collectionExists(uint collectionID) {\\n\\t\\trequire(_collections.length > collectionID, \\\"RAIR ERC721: Collection does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice\\tMakes sure the range exists\\n\\t/// @param\\trangeIndex\\tRange to verify\\n\\tmodifier rangeExists(uint rangeIndex) {\\n\\t\\trequire(_ranges.length > rangeIndex, \\\"RAIR ERC721: Range does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice\\tSets up the role system from AccessControl\\n\\t/// @dev\\tRAIR is the default symbol for the token, this can be updated with setTokenSymbol\\n\\t/// @param\\t_contractName\\tName of the contract\\n\\t/// @param\\t_creatorAddress\\tAddress of the creator of the contract\\n\\tconstructor(\\n\\t\\tstring memory _contractName,\\n\\t\\taddress _creatorAddress\\n\\t) ERC721(_contractName, \\\"RAIR\\\") {\\n\\t\\tfactory = msg.sender;\\n\\t\\t_symbol = \\\"RAIR\\\";\\n\\t\\t_royaltyFee = 30000;\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, _creatorAddress);\\n\\t\\t_setupRole(MINTER, _creatorAddress);\\n\\t\\t_setupRole(TRADER, _creatorAddress);\\n\\t\\t_requireTrader = true;\\n\\t\\tcreatorAddress = _creatorAddress;\\n\\t}\\n\\n\\t// @notice \\tTransfers the ownership of a contract to a new address\\n\\t// @param \\tnewOwner \\tAddress of the new owner of the contract\\n\\tfunction transferOwnership(address newOwner) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n\\t\\tcreatorAddress = newOwner;\\n\\t\\trenounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\t// @notice \\tUpdates the royalty fee used by the 2981 standard\\n\\t// @param \\tnewRoyalty \\tPercentage that should be sent to the owner of the contract (3 decimals, 30% = 30000)\\n\\tfunction setRoyaltyFee(uint16 newRoyalty) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_royaltyFee = newRoyalty;\\n\\t}\\n\\n\\t// @notice \\tUpdates the token symbol\\n\\t// @param \\tnewSymbol \\tNew symbol to be returned from the symbol() function\\n\\tfunction setTokenSymbol(string calldata newSymbol) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_symbol = newSymbol;\\n\\t}\\n\\n\\t// @notice \\tReturns the symbol for this contract\\n\\t// @dev \\tBy default, the symbol is RAIR\\n\\tfunction symbol() public view override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t// @notice \\tEnables or disables the requirement of the TRADER role to do NFT transfers \\n\\tfunction requireTrader(bool required) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_requireTrader = required;\\n\\t}\\n\\n\\t// @notice \\tEmits an event that OpenSea recognizes as a signal to never update the metadata for this token\\n\\t// @dev \\tThe metadata can still be updated, but OpenSea won't update it on their platform\\n\\t// @param \\ttokenId \\tIdentifier of the token to be frozen\\n\\tfunction freezeMetadata(uint tokenId) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\temit PermanentURI(tokenURI(tokenId), tokenId);\\n\\t}\\n\\n\\t// @notice \\tUpdates the URL that OpenSea uses to fetch the contract's metadata\\n\\t// @param \\tnewURI \\tURL of the metadata for the token\\n\\tfunction setContractURI(string calldata newURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tcontractMetadataURI = newURI;\\n\\t\\temit UpdatedContractURI(newURI);\\n\\t}\\n\\n\\t// @notice \\tReturns the metadata for the entire contract\\n\\t// @dev \\tNot the NFTs, this is information about the contract itself\\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn contractMetadataURI;\\n    }\\n\\t\\n\\t/// @notice\\tSets the Base URI for ALL tokens\\n\\t/// @dev\\tCan be overriden by the collection-wide URI or the specific token URI\\n\\t/// @param\\tnewURI\\tURI to be used\\n\\tfunction setBaseURI(string calldata newURI, bool appendTokenIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tbaseURI = newURI;\\n\\t\\tappendTokenIndexToContractURI = appendTokenIndex;\\n\\t\\temit UpdatedBaseURI(newURI, appendTokenIndex);\\n\\t}\\n\\n\\t/// @notice\\tOverridden function from the ERC721 contract that returns our\\n\\t///\\t\\t\\tvariable base URI instead of the hardcoded URI\\n\\tfunction _baseURI() internal view override(ERC721) returns (string memory) {\\n\\t\\treturn baseURI;\\n\\t}\\n\\n\\t/// @notice\\tUpdates the unique URI of a token, but in a single transaction\\n\\t/// @dev\\tUses the single function so it also emits an event\\n\\t/// @param\\ttokenIds\\tToken Indexes that will be given an URI\\n\\t/// @param\\tnewURIs\\t\\tNew URIs to be set\\n\\tfunction setUniqueURIBatch(uint[] calldata tokenIds, string[] calldata newURIs) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(tokenIds.length == newURIs.length, \\\"RAIR ERC721: Token IDs and URIs should have the same length\\\");\\n\\t\\tfor (uint i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tsetUniqueURI(tokenIds[i], newURIs[i]);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// @notice\\tGives an individual token an unique URI\\n\\t/// @dev\\tEmits an event so there's provenance\\n\\t/// @param\\ttokenId\\tToken Index that will be given an URI\\n\\t/// @param\\tnewURI\\tNew URI to be given\\n\\tfunction setUniqueURI(uint tokenId, string calldata newURI) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tuniqueTokenURI[tokenId] = newURI;\\n\\t\\temit UpdatedTokenURI(tokenId, newURI);\\n\\t}\\n\\n\\t/// @notice\\tGives an individual token an unique URI\\n\\t/// @dev\\tEmits an event so there's provenance\\n\\t/// @param\\tcollectionId\\tToken Index that will be given an URI\\n\\t/// @param\\tnewURI\\t\\tNew URI to be given\\n\\tfunction setCollectionURI(uint collectionId, string calldata newURI, bool appendTokenIndex) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tcollectionURI[collectionId] = newURI;\\n\\t\\tappendTokenIndexToCollectionURI[collectionId] = appendTokenIndex;\\n\\t\\temit UpdatedProductURI(collectionId, newURI, appendTokenIndex);\\n\\t}\\n\\n\\t/// @notice\\tReturns a token's URI\\n\\t/// @dev\\tWill return unique token URI or product URI or contract URI\\n\\t/// @param\\ttokenId\\t\\tToken Index to look for\\n\\tfunction tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\\n\\t\\t// Unique token URI\\n\\t\\tstring memory URI = uniqueTokenURI[tokenId];\\n\\t\\tif (bytes(URI).length > 0) {\\n\\t\\t\\treturn URI;\\n\\t\\t}\\n\\n\\t\\t// Collection wide URI\\n\\t\\tURI = collectionURI[tokenToCollection[tokenId]];\\n\\t\\tif (bytes(URI).length > 0) {\\n\\t\\t\\tif (appendTokenIndexToCollectionURI[tokenToCollection[tokenId]]) {\\n\\t\\t\\t\\treturn string(abi.encodePacked(URI, tokenToCollectionIndex(tokenId).toString()));\\n\\t\\t\\t}\\n\\t\\t\\treturn URI;\\n\\t\\t}\\n\\n\\t\\tURI = baseURI;\\n\\t\\tif (appendTokenIndexToContractURI) {\\n\\t\\t\\treturn super.tokenURI(tokenId);\\n\\t\\t}\\n\\t\\treturn URI;\\n\\t}\\n\\n\\t/// @notice\\tCreates a subdivision of tokens inside the contract (collection is the same as product)\\n\\t/// @dev\\tThe collections are generated sequentially, there can be no gaps between collections\\n\\t/// @param\\t_collectionName \\tName of the collection\\n\\t/// @param\\t_copies\\t\\t\\t\\tAmount of tokens inside the collection\\n\\tfunction createProduct(string memory _collectionName, uint _copies) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tuint lastTokenFromPreviousCollection;\\n\\t\\tif (_collections.length != 0) {\\n\\t\\t\\tlastTokenFromPreviousCollection = _collections[_collections.length - 1].endingToken + 1;\\n\\t\\t}\\n\\t\\t\\n\\t\\tcollection storage newCollection = _collections.push();\\n\\n\\t\\tnewCollection.startingToken = lastTokenFromPreviousCollection;\\n\\t\\t// -1 because we include the initial token\\n\\t\\tnewCollection.endingToken = newCollection.startingToken + _copies - 1;\\n\\t\\tnewCollection.name = string(_collectionName);\\n\\n\\t\\temit CreatedCollection(_collections.length - 1, _collectionName, lastTokenFromPreviousCollection, _copies);\\n\\t}\\n\\n\\t/// @notice This function will create ranges in batches\\n\\t/// @dev \\tThere isn't any gas savings here\\n\\t/// @param\\tcollectionId\\tContains the identification for the product\\n\\t/// @param\\tdata \\t\\t\\tAn array with the data for all the ranges that we want to implement \\n\\tfunction createRangeBatch(\\n\\t\\tuint collectionId,\\n\\t\\trangeData[] calldata data\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) collectionExists(collectionId) {\\n\\t\\trequire(data.length > 0, \\\"RAIR ERC721: Empty array\\\");\\n\\t\\tfor (uint i = 0; i < data.length; i++) {\\n\\t\\t\\t_createRange(\\n\\t\\t\\t\\tcollectionId,\\n\\t\\t\\t\\tdata[i].rangeLength,\\n\\t\\t\\t\\tdata[i].tokensAllowed,\\n\\t\\t\\t\\tdata[i].lockedTokens,\\n\\t\\t\\t\\tdata[i].price,\\n\\t\\t\\t\\tdata[i].name\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Creates a range inside a collection\\n\\t/// @dev \\tThis function is only available to an account with the `DEFAULT_ADMIN_ROLE` role\\n\\t/// @dev \\tThis function require thar the collection ID match a valid collection\\n\\t/// @param\\tcollectionId\\tContains the identification for the product\\n\\t/// @param\\trangeLength\\t\\tNumber of tokens to be contained in this new range\\n\\t/// @param \\tprice \\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param \\ttokensAllowed \\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param \\tlockedTokens \\tContains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param \\tname \\t\\t\\tContains the name for the created NFT collection range\\n\\tfunction createRange(\\n\\t\\tuint collectionId,\\n\\t\\tuint rangeLength,\\n\\t\\tuint price,\\n\\t\\tuint tokensAllowed,\\n\\t\\tuint lockedTokens,\\n\\t\\tstring calldata name\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) collectionExists(collectionId) {\\n\\t\\t_createRange(collectionId, rangeLength, price, tokensAllowed, lockedTokens, name);\\n\\t}\\n\\n\\t/// @notice This is a internal function that will create the NFT range if the requirements are met\\n\\t/// @param\\tcollectionIndex\\t\\tCollection identifier\\n\\t/// @param\\t_rangeLength\\t\\tNumber of NFTs in the range \\n\\t/// @param \\t_allowedTokens \\t\\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param \\t_lockedTokens \\t\\tContains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param \\t_price \\t\\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param \\t_name \\t\\t\\t\\tContains the name for the created NFT collection range\\n\\tfunction _createRange(\\n\\t\\tuint collectionIndex,\\n\\t\\tuint _rangeLength,\\n\\t\\tuint _allowedTokens,\\n\\t\\tuint _lockedTokens,\\n\\t\\tuint _price,\\n\\t\\tstring calldata _name\\n\\t) internal {\\n\\t\\tcollection storage selectedCollection =  _collections[collectionIndex];\\n\\n\\t\\tuint nextSequentialToken = selectedCollection.startingToken;\\n\\t\\tif (selectedCollection.rangeList.length > 0) {\\n\\t\\t\\tnextSequentialToken = (_ranges[selectedCollection.rangeList[selectedCollection.rangeList.length - 1]]).rangeEnd;\\n\\t\\t\\tnextSequentialToken++;\\n\\t\\t}\\n\\n\\t\\t// -1 because it includes the first token inside the range\\n\\t\\trequire(nextSequentialToken + _rangeLength - 1 <= selectedCollection.endingToken, 'RAIR ERC721: Invalid range length');\\n\\t\\trequire(_allowedTokens <= _rangeLength, \\\"RAIR ERC721: Number of allowed tokens must be less or equal than the range's length\\\");\\n\\t\\trequire(_lockedTokens <= _rangeLength, \\\"RAIR ERC721: Number of locked tokens must be less or equal than the range's length\\\");\\n\\t\\trequire(_price >= 100, \\\"RAIR ERC721: Minimum price for a range is 100\\\");\\n\\n\\t\\trange storage newRange = _ranges.push();\\n\\n\\t\\tnewRange.rangeStart = nextSequentialToken;\\n\\t\\tnewRange.rangeEnd = nextSequentialToken + _rangeLength - 1;\\n\\t\\tnewRange.mintableTokens = _rangeLength;\\n\\t\\tnewRange.tokensAllowed = _allowedTokens;\\n\\t\\tnewRange.lockedTokens = _lockedTokens;\\n\\t\\tnewRange.rangePrice = _price;\\n\\t\\tnewRange.rangeName = _name;\\n\\n\\t\\trangeToCollection[_ranges.length - 1] = collectionIndex;\\n\\t\\t\\n\\t\\t// No need to initialize minted tokens, the default value is 0\\n\\n\\t\\tselectedCollection.rangeList.push(_ranges.length - 1);\\n\\n\\t\\temit CreatedRange(\\n\\t\\t\\tcollectionIndex,\\n\\t\\t\\tnewRange.rangeStart,\\n\\t\\t\\tnewRange.rangeEnd,\\n\\t\\t\\tnewRange.rangePrice,\\n\\t\\t\\tnewRange.tokensAllowed,\\n\\t\\t\\tnewRange.lockedTokens,\\n\\t\\t\\tnewRange.rangeName,\\n\\t\\t\\t_ranges.length - 1\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice\\tUpdates a range\\n\\t/// @dev \\tBecause they are sequential, the length of the range can't be modified\\n\\t/// @param\\trangeId \\t\\t\\tIndex of the collection on the contract\\n\\t/// @param\\tname \\t\\t\\t\\tName of the range\\n\\t/// @param\\tprice_ \\t\\t\\t\\tPrice for the tokens in the range\\n\\t/// @param\\ttokensAllowed_ \\t\\tNumber of tokens allowed to be sold\\n\\t/// @param\\tlockedTokens_ \\t\\tNumber of tokens that have to be minted in order to unlock transfers\\n\\tfunction updateRange(\\n\\t\\tuint rangeId,\\n\\t\\tstring memory name,\\n\\t\\tuint price_,\\n\\t\\tuint tokensAllowed_,\\n\\t\\tuint lockedTokens_\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) rangeExists(rangeId) {\\n\\t\\trange storage selectedRange =  _ranges[rangeId];\\n\\n\\t\\trequire(price_ >= 100, \\\"RAIR ERC721: Minimum price for a range is 100\\\");\\n\\t\\trequire(tokensAllowed_ <= selectedRange.mintableTokens, \\\"RAIR ERC721: Tokens allowed should be less than the number of mintable tokens\\\");\\n\\t\\trequire(lockedTokens_ <= selectedRange.mintableTokens, \\\"RAIR ERC721: Locked tokens should be less than the number of mintable tokens\\\");\\n\\n\\t\\tselectedRange.tokensAllowed = tokensAllowed_;\\n\\t\\tif (lockedTokens_ > 0) {\\n\\t\\t\\temit TradingLocked(rangeId, selectedRange.rangeStart, selectedRange.rangeEnd, lockedTokens_);\\n\\t\\t\\tselectedRange.lockedTokens = lockedTokens_;\\n\\t\\t}\\n\\t\\tselectedRange.rangePrice = price_;\\n\\t\\tselectedRange.rangeName = name;\\n\\n\\t\\temit UpdatedRange(\\n\\t\\t\\trangeId,\\n\\t\\t\\tname,\\n\\t\\t\\tprice_,\\n\\t\\t\\ttokensAllowed_,\\n\\t\\t\\tlockedTokens_\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of collections on the contract\\n\\t/// @dev\\tUse with get collection to list all of the collections\\n\\tfunction getCollectionCount() external view override(IRAIR721_Contract) returns(uint) {\\n\\t\\treturn _collections.length;\\n\\t}\\n\\n\\t/// @notice\\tReturns information about a collection\\n\\t/// @param\\tcollectionIndex\\tIndex of the collection\\n\\tfunction getCollection(uint collectionIndex) external override(IRAIR721_Contract) view returns(collection memory) {\\n\\t\\treturn  _collections[collectionIndex];\\n\\t}\\n\\n\\t/// @notice\\tReturns whether or not an address has an NFT in a collection\\n\\t/// @param\\tuserAddress\\t\\t\\tUser to search\\n\\t/// @param\\tcollectionIndex\\t\\tCollection to search\\n\\t/// @param\\tstartingToken\\t\\tStarting token within the collection\\n\\t/// @param\\tendingToken\\t\\t\\tEnding token within the collection\\n\\tfunction hasTokenInCollection(\\n\\t\\taddress userAddress,\\n\\t\\tuint collectionIndex,\\n\\t\\tuint startingToken,\\n\\t\\tuint endingToken\\n\\t) public view returns (bool) {\\n\\t\\tcollection memory aux = _collections[collectionIndex];\\n\\t\\trequire(endingToken + aux.startingToken < aux.endingToken, \\\"RAIR721: Token validation out of bounds!\\\");\\n\\t\\treturn _hasTokenInRange(userAddress, startingToken + aux.startingToken, endingToken + aux.startingToken);\\n\\t}\\n\\n\\t/// @notice \\tLoops over the tokens in a specific range of tokens looking for one that belongs to the user\\n\\t/// @dev \\t\\tLoops are expensive in solidity, do not use this in a function that requires gas.\\n\\t/// @param \\t\\tuserAddress \\tAddress that must be found in the range of tokens\\n\\t/// @param \\t\\tstartingToken \\tStart of the range\\n\\t/// @param \\t\\tendingToken \\tEnd of the range\\n\\tfunction _hasTokenInRange(\\n\\t\\taddress userAddress,\\n\\t\\tuint startingToken,\\n\\t\\tuint endingToken\\n\\t) internal view returns (bool) {\\n\\t\\tfor (uint i = startingToken; i < endingToken; i++) {\\n\\t\\t\\tif (ownerOf(i) == userAddress) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/// @notice\\tTranslates the unique index of an NFT to it's collection index\\n\\t/// @param\\ttoken\\tToken ID to find\\n\\tfunction tokenToCollectionIndex(uint token) public view returns (uint tokenIndex) {\\n\\t\\treturn token - _collections[tokenToCollection[token]].startingToken;\\n\\t} \\n\\n\\t/// @notice\\tFinds the first token inside a collection that doesn't have an owner\\n\\t/// @param\\tcollectionID\\tIndex of the collection to search\\n\\t/// @param\\tstartingIndex\\tStarting token for the search\\n\\t/// @param\\tendingIndex\\t\\tEnding token for the search\\n\\tfunction getNextSequentialIndex(uint collectionID, uint startingIndex, uint endingIndex) public view collectionExists(collectionID) returns(uint nextIndex) {\\n\\t\\tcollection memory currentCollection = _collections[collectionID];\\n\\t\\treturn _getNextSequentialIndexInRange(currentCollection.startingToken + startingIndex, currentCollection.startingToken + endingIndex);\\n\\t}\\n\\n\\t/// @notice\\t\\tLoops through a range of tokens and returns the first token without an owner\\n\\t/// @dev \\t\\tLoops are expensive in solidity, do not use this in a gas-consuming function\\n\\t/// @param \\t\\tstartingToken \\tStarting token for the search\\n\\t/// @param \\t\\tendingToken \\tEnding token for the search\\n\\tfunction _getNextSequentialIndexInRange(uint startingToken, uint endingToken) internal view returns (uint nextIndex) {\\n\\t\\tfor (nextIndex = startingToken; nextIndex <= endingToken; nextIndex++) {\\n\\t\\t\\tif (!_exists(nextIndex)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(startingToken <= nextIndex && nextIndex <= endingToken, \\\"RAIR ERC721: There are no available tokens in this range.\\\");\\n\\t}\\n\\n\\t/// @notice This functions allow us to check the information of the range\\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range \\n\\t/// @param\\trangeIndex\\t\\tIdentification of the range to verify\\n\\t/// @return data \\t\\t\\tInformation about the range\\n\\t/// @return productIndex \\tContains the index of the product in the range\\n\\tfunction rangeInfo(uint rangeIndex) external view override(IRAIR721_Contract) rangeExists(rangeIndex) returns(range memory data, uint productIndex) {\\n\\t\\tdata = _ranges[rangeIndex];\\n\\t\\tproductIndex = rangeToCollection[rangeIndex];\\n\\t}\\n\\n\\t/// @notice\\tVerifies if the range where a token is located is locked or not\\n\\t/// @param\\t_tokenId\\tIndex of the token to search\\n\\tfunction isTokenLocked(uint256 _tokenId) public view returns (bool) {\\n\\t\\treturn _ranges[tokenToRange[_tokenId]].lockedTokens > 0;\\n\\t}\\n\\n\\t/// @notice\\tMints a specific token within a range\\n\\t/// @dev\\tHas to be used alongside getNextSequentialIndex to simulate a sequential minting\\n\\t/// @dev\\tAnyone that wants a specific token just has to call this function with the index they want\\n\\t/// @param\\tbuyerAddress\\t\\tAddress of the new token's owner\\n\\t/// @param\\trangeIndex\\t\\t\\tIndex of the range\\n\\t/// @param\\tindexInCollection\\tIndex of the token inside the collection\\n\\tfunction mintFromRange(\\n\\t\\taddress buyerAddress,\\n\\t\\tuint rangeIndex,\\n\\t\\tuint indexInCollection\\n\\t)\\n\\t\\texternal\\n\\t\\toverride(IRAIR721_Contract)\\n\\t\\tonlyRole(MINTER)\\n\\t\\trangeExists(rangeIndex)\\n\\t{\\n\\t\\trange storage selectedRange = _ranges[rangeIndex];\\n\\t\\tcollection storage selectedCollection = _collections[rangeToCollection[rangeIndex]];\\n\\n\\t\\trequire(selectedRange.tokensAllowed > 0, \\\"RAIR ERC721: Cannot mint more tokens from this range\\\");\\n\\t\\trequire(\\n\\t\\t\\tselectedRange.rangeStart <= selectedCollection.startingToken + indexInCollection &&\\n\\t\\t\\t\\tselectedCollection.startingToken + indexInCollection <= selectedRange.rangeEnd,\\n\\t\\t\\t\\\"RAIR ERC721: Invalid token index\\\"\\n\\t\\t);\\n\\t\\t\\n\\t\\t_safeMint(buyerAddress,  selectedCollection.startingToken + indexInCollection );\\n\\t\\t\\n\\t\\ttokenToRange[ selectedCollection.startingToken + indexInCollection ] = rangeIndex;\\n\\t\\ttokenToCollection[ selectedCollection.startingToken + indexInCollection ] = rangeToCollection[rangeIndex];\\n\\t\\tselectedRange.tokensAllowed--;\\n\\t\\t\\n\\t\\tif (selectedRange.lockedTokens > 0) {\\n\\t\\t\\tselectedRange.lockedTokens--;\\n\\t\\t\\tif (selectedRange.lockedTokens == 0) {\\n\\t\\t\\t\\temit TradingUnlocked(rangeIndex, selectedRange.rangeStart, selectedRange.rangeEnd);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Returns the fee for the NFT sale\\n\\t/// @param _tokenId - the NFT asset queried for royalty information\\n\\t/// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n\\t/// @return receiver - address of who should be sent the royalty payment\\n\\t/// @return royaltyAmount - the royalty payment amount for _salePrice sale price\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride(IRAIR721_Contract, IERC2981)\\n\\t\\treturns\\n\\t\\t(address receiver, uint256 royaltyAmount)\\n\\t{\\n\\t\\trequire(_exists(_tokenId), \\\"RAIR ERC721: Royalty query for a non-existing token\\\");\\n\\t\\treturn (creatorAddress, (_salePrice * _royaltyFee) / 100000);\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165, AccessControl, ERC721, IERC2981) returns (bool) {\\n\\t\\treturn interfaceId == type(IERC2981).interfaceId\\n\\t\\t\\t|| super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/// @notice Hook being called before every transfer\\n\\t/// @dev\\tLocks and the requirement of the TRADER role happe here\\n\\t/// @param\\t_from\\t\\tToken's original owner\\n\\t/// @param\\t_to\\t\\t\\tToken's new owner\\n\\t/// @param\\t_tokenId\\tToken's ID\\n\\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override(ERC721) {\\n\\t\\t// If the transfer isn't to mint (from = address(0)) and it's not a burn (to = address(0))\\n\\t\\tif (_from != address(0) && _to != address(0)) {\\n\\t\\t\\t// \\n\\t\\t\\tif (_ranges.length > 0 && rangeToCollection[tokenToRange[_tokenId]] == tokenToCollection[_tokenId]) {\\n\\t\\t\\t\\trequire(_ranges[tokenToRange[_tokenId]].lockedTokens == 0, \\\"RAIR ERC721: Transfers for this range are currently locked\\\");\\n\\t\\t\\t}\\n\\t\\t\\tif (_requireTrader) {\\n\\t\\t\\t\\t_checkRole(TRADER, msg.sender);\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\tsuper._beforeTokenTransfer(_from, _to, _tokenId);\\n\\t}\\n}\",\"keccak256\":\"0x4684fdb1ed3b7b773f4d4bd7da371e1c5daba130e52cb4b938faa5b4a1ad9632\",\"license\":\"GPL-3.0\"},\"latest-openzeppelin-contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"latest-openzeppelin-contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c35760003560e01c806364f8f754116200007a57806364f8f75414620001a95780639010d07c14620001d957806391d1485414620001f0578063a217fddf1462000207578063ca15c8731462000210578063d547741f146200022757600080fd5b806301ffc9a714620000c8578063248a9ca314620000f45780632aabb72614620001295780632dd3100014620001515780632f2ff15d146200017957806336568abe1462000192575b600080fd5b620000df620000d9366004620009a6565b6200023e565b60405190151581526020015b60405180910390f35b6200011a62000105366004620009d2565b60009081526020819052604090206001015490565b604051908152602001620000eb565b6200011a7fd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb81565b6200011a7f547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a7381565b620001906200018a36600462000a09565b6200026c565b005b62000190620001a336600462000a09565b6200029a565b620001c0620001ba36600462000a38565b62000320565b6040516001600160a01b039091168152602001620000eb565b620001c0620001ea36600462000ac2565b62000397565b620000df6200020136600462000a09565b620003b8565b6200011a600081565b6200011a62000221366004620009d2565b620003e1565b620001906200023836600462000a09565b620003fa565b60006001600160e01b03198216635a05180f60e01b14806200026657506200026682620004c2565b92915050565b6000828152602081905260409020600101546200028981620004f9565b62000295838362000508565b505050565b6001600160a01b0381163314620003105760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6200031c82826200052e565b5050565b60007f547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a736200034e81620004f9565b6000848487604051620003619062000998565b6200036f9392919062000ae5565b604051809103906000f0801580156200038c573d6000803e3d6000fd5b509695505050505050565b6000828152600160205260408120620003b1908362000554565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600160205260408120620002669062000562565b6000828152602081905260409020600101546200041781620004f9565b6200029583836200052e565b6200042f8282620003b8565b6200031c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004673390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620003b1836001600160a01b0384166200056d565b60006001600160e01b03198216637965db0b60e01b14806200026657506301ffc9a760e01b6001600160e01b031983161462000266565b620005058133620005bf565b50565b62000514828262000423565b6000828152600160205260409020620002959082620004ab565b6200053a82826200062e565b600082815260016020526040902062000295908262000696565b6000620003b18383620006ad565b600062000266825490565b6000818152600183016020526040812054620005b65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000266565b50600062000266565b620005cb8282620003b8565b6200031c57620005e6816001600160a01b03166014620006da565b620005f3836020620006da565b6040516020016200060692919062000b59565b60408051601f198184030181529082905262461bcd60e51b8252620003079160040162000bd2565b6200063a8282620003b8565b156200031c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000620003b1836001600160a01b03841662000894565b6000826000018281548110620006c757620006c762000c07565b9060005260206000200154905092915050565b60606000620006eb83600262000c33565b620006f890600262000c55565b67ffffffffffffffff81111562000713576200071362000c70565b6040519080825280601f01601f1916602001820160405280156200073e576020820181803683370190505b509050600360fc1b816000815181106200075c576200075c62000c07565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200078e576200078e62000c07565b60200101906001600160f81b031916908160001a9053506000620007b484600262000c33565b620007c190600162000c55565b90505b600181111562000843576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620007f957620007f962000c07565b1a60f81b82828151811062000812576200081262000c07565b60200101906001600160f81b031916908160001a90535060049490941c936200083b8162000c86565b9050620007c4565b508315620003b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000307565b600081815260018301602052604081205480156200098d576000620008bb60018362000ca0565b8554909150600090620008d19060019062000ca0565b90508181146200093d576000866000018281548110620008f557620008f562000c07565b90600052602060002001549050808760000184815481106200091b576200091b62000c07565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000951576200095162000cba565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000266565b600091505062000266565b6146cb8062000cd183390190565b600060208284031215620009b957600080fd5b81356001600160e01b031981168114620003b157600080fd5b600060208284031215620009e557600080fd5b5035919050565b80356001600160a01b038116811462000a0457600080fd5b919050565b6000806040838503121562000a1d57600080fd5b8235915062000a2f60208401620009ec565b90509250929050565b60008060006040848603121562000a4e57600080fd5b62000a5984620009ec565b9250602084013567ffffffffffffffff8082111562000a7757600080fd5b818601915086601f83011262000a8c57600080fd5b81358181111562000a9c57600080fd5b87602082850101111562000aaf57600080fd5b6020830194508093505050509250925092565b6000806040838503121562000ad657600080fd5b50508035926020909101359150565b6040815282604082015282846060830137600060608483018101919091526001600160a01b03929092166020820152601f909201601f191690910101919050565b60005b8381101562000b4357818101518382015260200162000b29565b8381111562000b53576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000b9381601785016020880162000b26565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000bc681602884016020880162000b26565b01602801949350505050565b602081526000825180602084015262000bf381604085016020870162000b26565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161562000c505762000c5062000c1d565b500290565b6000821982111562000c6b5762000c6b62000c1d565b500190565b634e487b7160e01b600052604160045260246000fd5b60008162000c985762000c9862000c1d565b506000190190565b60008282101562000cb55762000cb562000c1d565b500390565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b50604051620046cb380380620046cb8339810160408190526200003491620002fb565b81604051806040016040528060048152602001632920a4a960e11b81525081600090805190602001906200006a92919062000222565b5080516200008090600190602084019062000222565b5050601380546001600160a01b0319163317905550604080518082019091526004808252632920a4a960e11b6020909201918252620000c29160149162000222565b506015805461ffff1916617530179055620000df6000826200016e565b6200010b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9826200016e565b620001377f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce826200016e565b600f805461ff001916610100179055601280546001600160a01b039092166001600160a01b03199092169190911790555062000428565b6200017a82826200017e565b5050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166200017a5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001de3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200023090620003ec565b90600052602060002090601f0160209004810192826200025457600085556200029f565b82601f106200026f57805160ff19168380011785556200029f565b828001600101855582156200029f579182015b828111156200029f57825182559160200191906001019062000282565b50620002ad929150620002b1565b5090565b5b80821115620002ad5760008155600101620002b2565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002f657600080fd5b919050565b600080604083850312156200030f57600080fd5b82516001600160401b03808211156200032757600080fd5b818501915085601f8301126200033c57600080fd5b815181811115620003515762000351620002c8565b604051601f8201601f19908116603f011681019083821181831017156200037c576200037c620002c8565b816040528281526020935088848487010111156200039957600080fd5b600091505b82821015620003bd57848201840151818301850152908301906200039e565b82821115620003cf5760008484830101525b9550620003e1915050858201620002de565b925050509250929050565b600181811c908216806200040157607f821691505b6020821081036200042257634e487b7160e01b600052602260045260246000fd5b50919050565b61429380620004386000396000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c806391d1485411610182578063c45a0155116100e9578063e7662243116100a2578063e9300c6c1161007c578063e9300c6c146106dd578063e985e9c5146106f0578063f2fde38b1461072c578063fe6d81241461073f57600080fd5b8063e7662243146106af578063e8a3d485146106c2578063e927fc5c146106ca57600080fd5b8063c45a015514610622578063c87b56dd14610635578063c99931be14610648578063d31aa70f14610669578063d547741f14610689578063d6215ace1461069c57600080fd5b8063ac323a1f1161013b578063ac323a1f146105b0578063b64b21ca146105c3578063b88d4fde146105d6578063ba51b1b4146105e9578063bda5ec33146105fc578063c1d78b4a1461060f57600080fd5b806391d1485414610554578063938e3d7b1461056757806395d89b411461057a578063a217fddf14610582578063a22cb4651461058a578063ab9aae351461059d57600080fd5b8063248a9ca31161024157806342842e0e116101fa5780636352211e116101d45780636352211e14610508578063673636b71461051b57806367debfd81461052e57806370a082311461054157600080fd5b806342842e0e146104c25780634dcf6ad6146104d55780635a1f3c28146104e857600080fd5b8063248a9ca314610421578063276a28a3146104445780632a55205a146104575780632f2ff15d1461048957806335755a731461049c57806336568abe146104af57600080fd5b8063175c4ef811610293578063175c4ef814610399578063192e322c146103c0578063195f78ae146103d35780631c10106f146103f35780631c899d1a146103fb57806323b872dd1461040e57600080fd5b806301ffc9a7146102db57806306fdde0314610303578063081812fc14610318578063095ea7b3146103435780630de2689e146103585780630f553d2114610386575b600080fd5b6102ee6102e936600461342a565b610766565b60405190151581526020015b60405180910390f35b61030b610791565b6040516102fa919061349f565b61032b6103263660046134b2565b610823565b6040516001600160a01b0390911681526020016102fa565b6103566103513660046134e7565b6108b0565b005b6103786103663660046134b2565b60086020526000908152604090205481565b6040519081526020016102fa565b610356610394366004613521565b6109c5565b6103787f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6103566103ce36600461357d565b6109eb565b6103786103e13660046134b2565b60076020526000908152604090205481565b601154610378565b6103566104093660046135f0565b610a33565b61035661041c36600461363b565b610a99565b61037861042f3660046134b2565b60009081526006602052604090206001015490565b6102ee6104523660046134b2565b610aca565b61046a610465366004613677565b610b08565b604080516001600160a01b0390931683526020830191909152016102fa565b610356610497366004613699565b610bb7565b6103566104aa366004613709565b610bdc565b6103566104bd366004613699565b610d54565b6103566104d036600461363b565b610dd2565b6103566104e33660046134b2565b610ded565b6104fb6104f63660046134b2565b610e3c565b6040516102fa9190613747565b61032b6105163660046134b2565b610f98565b61035661052936600461386e565b61100f565b6102ee61053c3660046138cf565b611267565b61037861054f366004613908565b611438565b6102ee610562366004613699565b6114bf565b610356610575366004613923565b6114ea565b61030b611540565b610378600081565b610356610598366004613964565b61154f565b6103786105ab3660046134b2565b61155a565b6103566105be36600461398e565b61159b565b6103566105d13660046139b2565b6115bf565b6103566105e4366004613a05565b611619565b6103566105f7366004613923565b611651565b61037861060a366004613a80565b611668565b61035661061d366004613aac565b6117ec565b60135461032b906001600160a01b031681565b61030b6106433660046134b2565b6118c9565b61065b6106563660046134b2565b611b31565b6040516102fa929190613b17565b6103786106773660046134b2565b60096020526000908152604090205481565b610356610697366004613699565b611cab565b6103566106aa366004613b81565b611cd0565b6103566106bd366004613bde565b611d54565b61030b611ffb565b60125461032b906001600160a01b031681565b6103566106eb366004613c11565b61200a565b6102ee6106fe366004613c55565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61035661073a366004613908565b61211b565b6103787ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b03198216632baae9fd60e01b148061078b575061078b82612157565b92915050565b6060600080546107a090613c7f565b80601f01602080910402602001604051908101604052809291908181526020018280546107cc90613c7f565b80156108195780601f106107ee57610100808354040283529160200191610819565b820191906000526020600020905b8154815290600101906020018083116107fc57829003601f168201915b5050505050905090565b600061082e8261217c565b6108945760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108bb82610f98565b9050806001600160a01b0316836001600160a01b0316036109285760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161088b565b336001600160a01b0382161480610944575061094481336106fe565b6109b65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161088b565b6109c08383612199565b505050565b60006109d081612207565b50600f80549115156101000261ff0019909216919091179055565b60006109f681612207565b60115488908110610a195760405162461bcd60e51b815260040161088b90613cb9565b610a2889898989898989612214565b505050505050505050565b6000610a3e81612207565b6000848152600a60205260409020610a57908484613307565b507faab063d4691f636507767c2040fbab0b0e00a684d66a2f9640653ed5e7b859f9848484604051610a8b93929190613d28565b60405180910390a150505050565b610aa333826125bd565b610abf5760405162461bcd60e51b815260040161088b90613d4b565b6109c08383836126a6565b600081815260086020526040812054601080548392908110610aee57610aee613d9c565b906000526020600020906007020160040154119050919050565b600080610b148461217c565b610b7c5760405162461bcd60e51b815260206004820152603360248201527f52414952204552433732313a20526f79616c747920717565727920666f722061604482015272103737b716b2bc34b9ba34b733903a37b5b2b760691b606482015260840161088b565b6012546015546001600160a01b0390911690620186a090610ba19061ffff1686613dc8565b610bab9190613dfd565b915091505b9250929050565b600082815260066020526040902060010154610bd281612207565b6109c0838361284d565b6000610be781612207565b60115484908110610c0a5760405162461bcd60e51b815260040161088b90613cb9565b82610c575760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d7074792061727261790000000000000000604482015260640161088b565b60005b83811015610d4c57610d3a86868684818110610c7857610c78613d9c565b9050602002810190610c8a9190613e11565b35878785818110610c9d57610c9d613d9c565b9050602002810190610caf9190613e11565b60400135888886818110610cc557610cc5613d9c565b9050602002810190610cd79190613e11565b60600135898987818110610ced57610ced613d9c565b9050602002810190610cff9190613e11565b602001358a8a88818110610d1557610d15613d9c565b9050602002810190610d279190613e11565b610d35906080810190613e31565b612214565b80610d4481613e77565b915050610c5a565b505050505050565b6001600160a01b0381163314610dc45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161088b565b610dce82826128d3565b5050565b6109c083838360405180602001604052806000815250611619565b6000610df881612207565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b55657207610e23846118c9565b604051610e30919061349f565b60405180910390a25050565b610e676040518060800160405280600081526020016000815260200160608152602001606081525090565b60118281548110610e7a57610e7a613d9c565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282018054610eb790613c7f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee390613c7f565b8015610f305780601f10610f0557610100808354040283529160200191610f30565b820191906000526020600020905b815481529060010190602001808311610f1357829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610f8857602002820191906000526020600020905b815481526020019060010190808311610f74575b5050505050815250509050919050565b6000818152600260205260408120546001600160a01b03168061078b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161088b565b600061101a81612207565b6010548690811061103d5760405162461bcd60e51b815260040161088b90613e90565b60006010888154811061105257611052613d9c565b9060005260206000209060070201905060648610156110835760405162461bcd60e51b815260040161088b90613ed1565b80600301548511156111135760405162461bcd60e51b815260206004820152604d60248201527f52414952204552433732313a20546f6b656e7320616c6c6f7765642073686f7560448201527f6c64206265206c657373207468616e20746865206e756d626572206f66206d6960648201526c6e7461626c6520746f6b656e7360981b608482015260a40161088b565b80600301548411156111a25760405162461bcd60e51b815260206004820152604c60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e20746865206e756d626572206f66206d696e60648201526b7461626c6520746f6b656e7360a01b608482015260a40161088b565b6002810185905583156112015780546001820154604080519283526020830191909152810185905288907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2600481018490555b60058101869055865161121d90600683019060208a019061338b565b507f675fe88181b85cb3612f534abc69fa999ba2e4744dc830488c9de8b25ec6cfd18888888888604051611255959493929190613f1e565b60405180910390a15050505050505050565b6000806011858154811061127d5761127d613d9c565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820180546112ba90613c7f565b80601f01602080910402602001604051908101604052809291908181526020018280546112e690613c7f565b80156113335780601f1061130857610100808354040283529160200191611333565b820191906000526020600020905b81548152906001019060200180831161131657829003601f168201915b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561138b57602002820191906000526020600020905b815481526020019060010190808311611377575b505050505081525050905080602001518160000151846113ab9190613f54565b106114095760405162461bcd60e51b815260206004820152602860248201527f524149523732313a20546f6b656e2076616c69646174696f6e206f7574206f6660448201526720626f756e64732160c01b606482015260840161088b565b805161142c90879061141b9087613f54565b83516114279087613f54565b61293a565b9150505b949350505050565b60006001600160a01b0382166114a35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161088b565b506001600160a01b031660009081526003602052604090205490565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006114f581612207565b611501600e8484613307565b507f64729fba330f29cb50d748098a4dff25d203b0c55833653113fb5e80bcbd16c18383604051611533929190613f6c565b60405180910390a1505050565b6060601480546107a090613c7f565b610dce33838361298e565b60008181526007602052604081205460118054909190811061157e5761157e613d9c565b9060005260206000209060040201600001548261078b9190613f80565b60006115a681612207565b506015805461ffff191661ffff92909216919091179055565b60006115ca81612207565b6115d6600d8585613307565b50600f805460ff19168315151790556040517f5de368dcac819bc4d6547633836d64b15fcae63449b7643b7360f2a29783af4c90610a8b90869086908690613f97565b61162333836125bd565b61163f5760405162461bcd60e51b815260040161088b90613d4b565b61164b84848484612a5c565b50505050565b600061165c81612207565b61164b60148484613307565b600083806011805490501161168f5760405162461bcd60e51b815260040161088b90613cb9565b6000601186815481106116a4576116a4613d9c565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820180546116e190613c7f565b80601f016020809104026020016040519081016040528092919081815260200182805461170d90613c7f565b801561175a5780601f1061172f5761010080835404028352916020019161175a565b820191906000526020600020905b81548152906001019060200180831161173d57829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156117b257602002820191906000526020600020905b81548152602001906001019080831161179e575b50505050508152505090506117e28582600001516117d09190613f54565b82516117dd908790613f54565b612a8f565b9695505050505050565b60006117f781612207565b83821461186c5760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e6774680000000000606482015260840161088b565b60005b84811015610d4c576118b786868381811061188c5761188c613d9c565b905060200201358585848181106118a5576118a5613d9c565b90506020028101906104099190613e31565b806118c181613e77565b91505061186f565b6000818152600a60205260408120805460609291906118e790613c7f565b80601f016020809104026020016040519081016040528092919081815260200182805461191390613c7f565b80156119605780601f1061193557610100808354040283529160200191611960565b820191906000526020600020905b81548152906001019060200180831161194357829003601f168201915b505050505090506000815111156119775792915050565b6000838152600760209081526040808320548352600b9091529020805461199d90613c7f565b80601f01602080910402602001604051908101604052809291908181526020018280546119c990613c7f565b8015611a165780601f106119eb57610100808354040283529160200191611a16565b820191906000526020600020905b8154815290600101906020018083116119f957829003601f168201915b50505050509050600081511115611a85576000838152600760209081526040808320548352600c90915290205460ff161561078b5780611a5d611a588561155a565b612b3a565b604051602001611a6e929190613fbd565b604051602081830303815290604052915050919050565b600d8054611a9290613c7f565b80601f0160208091040260200160405190810160405280929190818152602001828054611abe90613c7f565b8015611b0b5780601f10611ae057610100808354040283529160200191611b0b565b820191906000526020600020905b815481529060010190602001808311611aee57829003601f168201915b5050600f54939450505060ff90911615905061078b57611b2a83612c3a565b9392505050565b611b716040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000828060108054905011611b985760405162461bcd60e51b815260040161088b90613e90565b60108481548110611bab57611bab613d9c565b90600052602060002090600702016040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054611c1090613c7f565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3c90613c7f565b8015611c895780601f10611c5e57610100808354040283529160200191611c89565b820191906000526020600020905b815481529060010190602001808311611c6c57829003601f168201915b5050509190925250505060009485526009602052604090942054939492505050565b600082815260066020526040902060010154611cc681612207565b6109c083836128d3565b6000611cdb81612207565b6000858152600b60205260409020611cf4908585613307565b506000858152600c602052604090819020805460ff1916841515179055517fe0ef8838c8237d3ed99cc13c05ad833ffd57325e1522b10b58ca130044326b8c90611d45908790879087908790613fec565b60405180910390a15050505050565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9611d7e81612207565b60105483908110611da15760405162461bcd60e51b815260040161088b90613e90565b600060108581548110611db657611db6613d9c565b9060005260206000209060070201905060006011600960008881526020019081526020016000205481548110611dee57611dee613d9c565b906000526020600020906004020190506000826002015411611e6f5760405162461bcd60e51b815260206004820152603460248201527f52414952204552433732313a2043616e6e6f74206d696e74206d6f726520746f6044820152736b656e732066726f6d20746869732072616e676560601b606482015260840161088b565b8054611e7c908690613f54565b825411801590611e9c575060018201548154611e99908790613f54565b11155b611ee85760405162461bcd60e51b815260206004820181905260248201527f52414952204552433732313a20496e76616c696420746f6b656e20696e646578604482015260640161088b565b611f0187868360000154611efc9190613f54565b612cdd565b8560086000878460000154611f169190613f54565b815260200190815260200160002081905550600960008781526020019081526020016000205460076000878460000154611f509190613f54565b815260200190815260200160002081905550816002016000815480929190611f7790614019565b9091555050600482015415611ff257600482018054906000611f9883614019565b91905055508160040154600003611ff2578154600183015460405188927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e92611fe992918252602082015260400190565b60405180910390a25b50505050505050565b6060600e80546107a090613c7f565b600061201581612207565b60115460009015612061576011805461203090600190613f80565b8154811061204057612040613d9c565b906000526020600020906004020160010154600161205e9190613f54565b90505b60118054600181810183556000929092526004027f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6801828155906120a58584613f54565b6120af9190613f80565b600182015584516120c9906002830190602088019061338b565b506011546120d990600190613f80565b7fe318895d3fd44cb3524ca783576b7737ae76b172e344357462ab4258b50c1c2286848760405161210c93929190614030565b60405180910390a25050505050565b600061212681612207565b61213160008361284d565b601280546001600160a01b0319166001600160a01b038416179055610dce600033610d54565b60006001600160e01b03198216637965db0b60e01b148061078b575061078b82612cf7565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906121ce82610f98565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6122118133612d47565b50565b60006011888154811061222957612229613d9c565b600091825260209091206004909102018054600382015491925090156122ad576003820180546010919061225f90600190613f80565b8154811061226f5761226f613d9c565b90600052602060002001548154811061228a5761228a613d9c565b906000526020600020906007020160010154905080806122a990613e77565b9150505b600180830154906122be8a84613f54565b6122c89190613f80565b11156123205760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c69642072616e6765206c656e67746044820152600d60fb1b606482015260840161088b565b878711156123b25760405162461bcd60e51b815260206004820152605360248201527f52414952204552433732313a204e756d626572206f6620616c6c6f776564207460448201527f6f6b656e73206d757374206265206c657373206f7220657175616c207468616e606482015272040e8d0ca40e4c2dcceca4ee640d8cadccee8d606b1b608482015260a40161088b565b878611156124435760405162461bcd60e51b815260206004820152605260248201527f52414952204552433732313a204e756d626572206f66206c6f636b656420746f60448201527f6b656e73206d757374206265206c657373206f7220657175616c207468616e206064820152710e8d0ca40e4c2dcceca4ee640d8cadccee8d60731b608482015260a40161088b565b60648510156124645760405162461bcd60e51b815260040161088b90613ed1565b60108054600181810183556000929092526007027f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201828155906124a88a84613f54565b6124b29190613f80565b6001820155600381018990556002810188905560048101879055600581018690556124e1600682018686613307565b50896009600060016010805490506124f99190613f80565b8152602081019190915260400160002055601054600384019061251e90600190613f80565b90806001815401808255809150506001900390600052602060002001600090919091909150557fc4e232d19c750404428930450f0a050bf4c166f32910679d1b9e52f17bad83478a826000015483600101548460050154856002015486600401548760060160016010805490506125959190613f80565b6040516125a9989796959493929190614055565b60405180910390a150505050505050505050565b60006125c88261217c565b6126295760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161088b565b600061263483610f98565b9050806001600160a01b0316846001600160a01b0316148061267b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806114305750836001600160a01b031661269484610823565b6001600160a01b031614949350505050565b826001600160a01b03166126b982610f98565b6001600160a01b03161461271d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161088b565b6001600160a01b03821661277f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161088b565b61278a838383612dab565b612795600082612199565b6001600160a01b03831660009081526003602052604081208054600192906127be908490613f80565b90915550506001600160a01b03821660009081526003602052604081208054600192906127ec908490613f54565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61285782826114bf565b610dce5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561288f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6128dd82826114bf565b15610dce5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000825b8281101561298357846001600160a01b031661295982610f98565b6001600160a01b031603612971576001915050611b2a565b8061297b81613e77565b91505061293e565b506000949350505050565b816001600160a01b0316836001600160a01b0316036129ef5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161088b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612a678484846126a6565b612a7384848484612eed565b61164b5760405162461bcd60e51b815260040161088b90614132565b815b818111612ab857612aa18161217c565b15612ab85780612ab081613e77565b915050612a91565b808311158015612ac85750818111155b61078b5760405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e00000000000000606482015260840161088b565b606081600003612b615750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612b8b5780612b7581613e77565b9150612b849050600a83613dfd565b9150612b65565b6000816001600160401b03811115612ba557612ba56137c3565b6040519080825280601f01601f191660200182016040528015612bcf576020820181803683370190505b5090505b841561143057612be4600183613f80565b9150612bf1600a86614184565b612bfc906030613f54565b60f81b818381518110612c1157612c11613d9c565b60200101906001600160f81b031916908160001a905350612c33600a86613dfd565b9450612bd3565b6060612c458261217c565b612ca95760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161088b565b6000612cb3612feb565b90506000815111612cd35760405180602001604052806000815250611b2a565b80611a5d84612b3a565b610dce828260405180602001604052806000815250612ffa565b60006001600160e01b031982166380ac58cd60e01b1480612d2857506001600160e01b03198216635b5e139f60e01b145b8061078b57506301ffc9a760e01b6001600160e01b031983161461078b565b612d5182826114bf565b610dce57612d69816001600160a01b0316601461302d565b612d7483602061302d565b604051602001612d85929190614198565b60408051601f198184030181529082905262461bcd60e51b825261088b9160040161349f565b6001600160a01b03831615801590612dcb57506001600160a01b03821615155b156109c05760105415801590612e03575060008181526007602090815260408083205460088352818420548452600990925290912054145b15612eb357600081815260086020526040902054601080549091908110612e2c57612e2c613d9c565b906000526020600020906007020160040154600014612eb35760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a205472616e736665727320666f7220746869732060448201527f72616e6765206172652063757272656e746c79206c6f636b6564000000000000606482015260840161088b565b600f54610100900460ff16156109c0576109c07f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce33612d47565b60006001600160a01b0384163b15612fe357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612f3190339089908890889060040161420d565b6020604051808303816000875af1925050508015612f6c575060408051601f3d908101601f19168201909252612f6991810190614240565b60015b612fc9573d808015612f9a576040519150601f19603f3d011682016040523d82523d6000602084013e612f9f565b606091505b508051600003612fc15760405162461bcd60e51b815260040161088b90614132565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611430565b506001611430565b6060600d80546107a090613c7f565b61300483836131c8565b6130116000848484612eed565b6109c05760405162461bcd60e51b815260040161088b90614132565b6060600061303c836002613dc8565b613047906002613f54565b6001600160401b0381111561305e5761305e6137c3565b6040519080825280601f01601f191660200182016040528015613088576020820181803683370190505b509050600360fc1b816000815181106130a3576130a3613d9c565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106130d2576130d2613d9c565b60200101906001600160f81b031916908160001a90535060006130f6846002613dc8565b613101906001613f54565b90505b6001811115613179576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061313557613135613d9c565b1a60f81b82828151811061314b5761314b613d9c565b60200101906001600160f81b031916908160001a90535060049490941c9361317281614019565b9050613104565b508315611b2a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161088b565b6001600160a01b03821661321e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161088b565b6132278161217c565b156132745760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161088b565b61328060008383612dab565b6001600160a01b03821660009081526003602052604081208054600192906132a9908490613f54565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461331390613c7f565b90600052602060002090601f016020900481019282613335576000855561337b565b82601f1061334e5782800160ff1982351617855561337b565b8280016001018555821561337b579182015b8281111561337b578235825591602001919060010190613360565b506133879291506133ff565b5090565b82805461339790613c7f565b90600052602060002090601f0160209004810192826133b9576000855561337b565b82601f106133d257805160ff191683800117855561337b565b8280016001018555821561337b579182015b8281111561337b5782518255916020019190600101906133e4565b5b808211156133875760008155600101613400565b6001600160e01b03198116811461221157600080fd5b60006020828403121561343c57600080fd5b8135611b2a81613414565b60005b8381101561346257818101518382015260200161344a565b8381111561164b5750506000910152565b6000815180845261348b816020860160208601613447565b601f01601f19169290920160200192915050565b602081526000611b2a6020830184613473565b6000602082840312156134c457600080fd5b5035919050565b80356001600160a01b03811681146134e257600080fd5b919050565b600080604083850312156134fa57600080fd5b613503836134cb565b946020939093013593505050565b803580151581146134e257600080fd5b60006020828403121561353357600080fd5b611b2a82613511565b60008083601f84011261354e57600080fd5b5081356001600160401b0381111561356557600080fd5b602083019150836020828501011115610bb057600080fd5b600080600080600080600060c0888a03121561359857600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160401b038111156135d157600080fd5b6135dd8a828b0161353c565b989b979a50959850939692959293505050565b60008060006040848603121561360557600080fd5b8335925060208401356001600160401b0381111561362257600080fd5b61362e8682870161353c565b9497909650939450505050565b60008060006060848603121561365057600080fd5b613659846134cb565b9250613667602085016134cb565b9150604084013590509250925092565b6000806040838503121561368a57600080fd5b50508035926020909101359150565b600080604083850312156136ac57600080fd5b823591506136bc602084016134cb565b90509250929050565b60008083601f8401126136d757600080fd5b5081356001600160401b038111156136ee57600080fd5b6020830191508360208260051b8501011115610bb057600080fd5b60008060006040848603121561371e57600080fd5b8335925060208401356001600160401b0381111561373b57600080fd5b61362e868287016136c5565b6000602080835283518184015280840151604084015260408401516080606085015261377660a0850182613473565b6060860151858203601f19016080870152805180835290840192506000918401905b808310156137b85783518252928401926001929092019190840190613798565b509695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b03808411156137f3576137f36137c3565b604051601f8501601f19908116603f0116810190828211818310171561381b5761381b6137c3565b8160405280935085815286868601111561383457600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261385f57600080fd5b611b2a838335602085016137d9565b600080600080600060a0868803121561388657600080fd5b8535945060208601356001600160401b038111156138a357600080fd5b6138af8882890161384e565b959895975050505060408401359360608101359360809091013592509050565b600080600080608085870312156138e557600080fd5b6138ee856134cb565b966020860135965060408601359560600135945092505050565b60006020828403121561391a57600080fd5b611b2a826134cb565b6000806020838503121561393657600080fd5b82356001600160401b0381111561394c57600080fd5b6139588582860161353c565b90969095509350505050565b6000806040838503121561397757600080fd5b613980836134cb565b91506136bc60208401613511565b6000602082840312156139a057600080fd5b813561ffff81168114611b2a57600080fd5b6000806000604084860312156139c757600080fd5b83356001600160401b038111156139dd57600080fd5b6139e98682870161353c565b90945092506139fc905060208501613511565b90509250925092565b60008060008060808587031215613a1b57600080fd5b613a24856134cb565b9350613a32602086016134cb565b92506040850135915060608501356001600160401b03811115613a5457600080fd5b8501601f81018713613a6557600080fd5b613a74878235602084016137d9565b91505092959194509250565b600080600060608486031215613a9557600080fd5b505081359360208301359350604090920135919050565b60008060008060408587031215613ac257600080fd5b84356001600160401b0380821115613ad957600080fd5b613ae5888389016136c5565b90965094506020870135915080821115613afe57600080fd5b50613b0b878288016136c5565b95989497509550505050565b60408152825160408201526020830151606082015260408301516080820152606083015160a0820152608083015160c082015260a083015160e0820152600060c084015160e0610100840152613b71610120840182613473565b9150508260208301529392505050565b60008060008060608587031215613b9757600080fd5b8435935060208501356001600160401b03811115613bb457600080fd5b613bc08782880161353c565b9094509250613bd3905060408601613511565b905092959194509250565b600080600060608486031215613bf357600080fd5b613bfc846134cb565b95602085013595506040909401359392505050565b60008060408385031215613c2457600080fd5b82356001600160401b03811115613c3a57600080fd5b613c468582860161384e565b95602094909401359450505050565b60008060408385031215613c6857600080fd5b613c71836134cb565b91506136bc602084016134cb565b600181811c90821680613c9357607f821691505b602082108103613cb357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000613d42604083018486613cff565b95945050505050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613de257613de2613db2565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613e0c57613e0c613de7565b500490565b60008235609e19833603018112613e2757600080fd5b9190910192915050565b6000808335601e19843603018112613e4857600080fd5b8301803591506001600160401b03821115613e6257600080fd5b602001915036819003821315610bb057600080fd5b600060018201613e8957613e89613db2565b5060010190565b60208082526021908201527f52414952204552433732313a2052616e676520646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b6020808252602d908201527f52414952204552433732313a204d696e696d756d20707269636520666f72206160408201526c02072616e67652069732031303609c1b606082015260800190565b85815260a060208201526000613f3760a0830187613473565b604083019590955250606081019290925260809091015292915050565b60008219821115613f6757613f67613db2565b500190565b602081526000611430602083018486613cff565b600082821015613f9257613f92613db2565b500390565b604081526000613fab604083018587613cff565b90508215156020830152949350505050565b60008351613fcf818460208801613447565b835190830190613fe3818360208801613447565b01949350505050565b848152606060208201526000614006606083018587613cff565b9050821515604083015295945050505050565b60008161402857614028613db2565b506000190190565b6060815260006140436060830186613473565b60208301949094525060400152919050565b60006101008a835260208a818501528960408501528860608501528760808501528660a08501528160c08501526000865481600182811c91508083168061409d57607f831692505b85831081036140ba57634e487b7160e01b85526022600452602485fd5b958801828152602001958080156140d857600181146140e957614114565b60ff19851688528688019550614114565b60008c81526020902060005b8581101561410e5781548a8201529084019088016140f5565b89019650505b50505050508093505050508260e08301529998505050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261419357614193613de7565b500690565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516141d0816017850160208801613447565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614201816028840160208801613447565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906117e290830184613473565b60006020828403121561425257600080fd5b8151611b2a8161341456fea264697066735822122000d0d9231039620b8331eb241fe07100cf1317db07aa637abc89eb8679eb92d464736f6c634300080d0033a26469706673582212204559fda594bf33cbba6b3dc63c9e1a7431ed0d5b70b4147971800b6d182ae9af64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "factoryAddress": "Address of the factory able to call the deploy function"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Factory Constructor"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18844,
        "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18839_storage)"
      },
      {
        "astId": 19158,
        "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)21530_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)21530_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)21530_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18839_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18839_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)21530_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 21529,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)21229_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)18839_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18836,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18838,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)21229_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 21224,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 21228,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}